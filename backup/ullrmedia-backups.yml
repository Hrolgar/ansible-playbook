---
- name: Stop & archive Jellyfin on ullrmedia
  hosts: ullrmedia
  gather_facts: true
  vars:
    today: "{{ ansible_date_time.date }}"
    backup_name: "jellyfin_backup_{{ today }}.tar.gz"
    remote_app_path: /opt/nas/apps/Jellyfin

  tasks:
    - name: Stop Jellyfin container
      ansible.builtin.docker_container:
        name: jellyfin
        state: stopped

    - name: Wait for Jellyfin to fully stop
      pause:
        seconds: 5

    - name: Create Jellyfin backup tarball
      shell: |
        tar -czvf /tmp/{{ backup_name }} \
          --exclude='config/metadata' \
          --exclude='config/data/subtitles' \
          --exclude='config/data/introskipper' \
          --exclude='cache' \
          -C "{{ remote_app_path }}" .
      args:
        chdir: /tmp

    - name: Restart Jellyfin container
      ansible.builtin.docker_container:
        name: jellyfin
        state: started

    - name: Verify tarball exists
      shell: ls -lh /tmp/{{ backup_name }}
      register: check_tar
      failed_when: check_tar.rc != 0

    - debug:
        var: check_tar.stdout


- name: Fetch, package compose & upload to Proton Drive
  hosts: localhost
  gather_facts: true
  vars:
    today: "{{ ansible_date_time.date }}"
    service_name: jellyfin
    backup_name: "jellyfin_backup_{{ today }}.tar.gz"
    compose_file: "docker-compose-{{ today }}.yml"
    compose_local_src: "/host_apps/portainer_data/compose/10/docker-compose.yml"
    local_backup_root: "/ansible-backups/{{ today }}/{{ service_name }}"
    proton_remote: "proton-remote"

  tasks:
    - name: Ensure local backup staging directory exists
      ansible.builtin.file:
        path: "{{ local_backup_root }}"
        state: directory
        mode: '0755'

    - name: Fetch the tarball from ullrmedia
      fetch:
        src: "/tmp/{{ backup_name }}"
        dest: "{{ local_backup_root }}/"
        flat: yes
      delegate_to: ullrmedia

    - name: Ensure compose folder exists
      ansible.builtin.file:
        path: "{{ local_backup_root }}/compose"
        state: directory
        mode: '0755'

    - name: Copy Jellyfin docker‑compose.yml locally
      ansible.builtin.copy:
        src: "{{ compose_local_src }}"
        dest: "{{ local_backup_root }}/compose/{{ compose_file }}"
        remote_src: no

    - name: Upload Jellyfin backup to Proton Drive
      shell: |
        /usr/bin/rclone \
          --config /root/.config/rclone/rclone.conf \
          copy \
            "{{ local_backup_root }}/{{ backup_name }}" \
            "{{ proton_remote }}:backups/{{ today }}/ullrmedia/jellyfin" \
          --verbose \
          --protondrive-replace-existing-draft=true
      register: upload_result
      failed_when: upload_result.rc != 0

    - name: Upload docker‑compose backup to Proton Drive
      shell: |
        /usr/bin/rclone \
          --config /root/.config/rclone/rclone.conf \
          copy \
            "{{ local_backup_root }}/compose/{{ compose_file }}" \
            "{{ proton_remote }}:backups/{{ today }}/ullrmedia/jellyfin" \
          --verbose \ 
          --protondrive-replace-existing-draft=true
      register: upload_comp_result
      failed_when: upload_comp_result.rc != 0

    - name: Remove remote tarball
      ansible.builtin.file:
        path: "/tmp/{{ backup_name }}"
        state: absent
      delegate_to: ullrmedia

    - name: Cleanup local backup staging area
      ansible.builtin.file:
        path: "{{ local_backup_root }}"
        state: absent
      ignore_errors: true
