---
- name: Stop & archive Jellyfin on ullrmedia
  hosts: ullrmedia
  gather_facts: true
  vars:
    today: "{{ ansible_date_time.date }}"
    backup_name: "jellyfin_backup_{{ today }}.tar.gz"
    remote_app_path: /opt/nas/apps/Jellyfin

  tasks:


    - name: Verify tarball exists
      shell: ls -lh /tmp/{{ backup_name }}
      register: check_tar
      failed_when: check_tar.rc != 0

    - debug:
        var: check_tar.stdout

- name: Fetch, package compose & upload to Proton Drive
  hosts: localhost
  gather_facts: true
  vars:
    today: "{{ ansible_date_time.date }}"
    service_name: jellyfin
    backup_name: "jellyfin_backup_{{ today }}.tar.gz"
    compose_file: "docker-compose-{{ today }}.yml"
    # path on your Ansible-host VM where you keep compose files
    compose_local_src: "/host_apps/portainer_data/compose/10/docker-compose.yml"
    local_backup_root: "/ansible-backups/{{ today }}/{{ service_name }}"
    proton_remote: "proton-remote"

  tasks:
    - name: Ensure local backup staging directory exists
      file:
        path: "{{ local_backup_root }}"
        state: directory
        mode: '0755'

    - name: Fetch the tarball from ullrmedia
      fetch:
        src: "/tmp/{{ backup_name }}"
        dest: "{{ local_backup_root }}/"
        flat: yes
      delegate_to: ullrmedia

    - name: Ensure compose folder exists
      file:
        path: "{{ local_backup_root }}/compose"
        state: directory
        mode: '0755'

    - name: Copy Jellyfin docker‑compose.yml locally
      copy:
        src: "{{ compose_local_src }}"
        dest: "{{ local_backup_root }}/compose/{{ compose_file }}"
        remote_src: no

      
    - name: Upload via shell, with explicit PATH
      shell: |
        rclone copy \
          "{{ local_backup_root }}/{{ backup_name }}" \
          "{{ proton_remote }}:backups/{{ today }}/ullrmedia/"
      environment:
        PATH: "/usr/local/bin:/usr/bin:{{ lookup('env','PATH') }}"
        RCLONE_CONFIG_FILE: "{{ lookup('env','HOME') }}/.config/rclone/rclone.conf"
      register: upload_result
      failed_when: upload_result.rc != 0

      
    - name: Show rclone upload output if it fails
      debug:
        msg: |
          rc={{ upload_result.rc }}
          stdout={{ upload_result.stdout }}
          stderr={{ upload_result.stderr }}
      when: upload_result.rc != 0


    - name: Upload docker‑compose backup to Proton Drive
      shell: >
        rclone copy
          "{{ local_backup_root }}/compose/{{ compose_file }}"
          "{{ proton_remote }}:backups/{{ today }}/ullrmedia/compose/"
      environment:
        RCLONE_CONFIG_FILE: "{{ lookup('env','HOME') }}/.config/rclone/rclone.conf"

    - name: Remove remote tarball
      shell: ssh ullrmedia "rm -f /tmp/{{ backup_name }}"

    - name: Cleanup local backup staging area
      file:
        path: "{{ local_backup_root }}"
        state: absent
        ignore_errors: true
