- name: Stop & archive Jellyfin on ullrmedia
  hosts: ullrmedia
  gather_facts: false

  vars:
    today: "{{ ansible_date_time.date }}"
    backup_name: "jellyfin_backup_{{ today }}.tar.gz"
    remote_app_path: /opt/nas/apps/Jellyfin

  tasks:
    - name: Stop Jellyfin container
      ansible.builtin.docker_container:
        name: jellyfin
        state: stopped

    - name: Wait for Jellyfin to fully stop
      pause: seconds=5

    - name: Create Jellyfin backup tarball
      shell: |
        tar -czvf /tmp/{{ backup_name }} \
          --exclude=config/metadata \
          --exclude=config/data/subtitles \
          --exclude=config/data/introskipper \
          --exclude=cache \
          -C "{{ remote_app_path }}" .
      args: { chdir: /tmp }

    - name: Restart Jellyfin
      ansible.builtin.docker_container:
        name: jellyfin
        state: started

    - name: List /tmp so we can confirm the tarball is there
      shell: ls -lh /tmp
      register: tmp_ls

    - debug: var=tmp_ls.stdout_lines

- name: Fetch, upload & clean up
  hosts: localhost
  gather_facts: false

  vars:
    today: "{{ ansible_date_time.date }}"
    local_backup_root: "/ansible-backups/{{ today }}/jellyfin"
    proton_remote: "proton-remote"
    backup_name: "jellyfin_backup_{{ today }}.tar.gz"

  tasks:
    - name: Ensure local backup directory exists
      file:
        path: "{{ local_backup_root }}"
        state: directory

    - name: Fetch the tarball from ullrmedia
      fetch:
        src: "/tmp/{{ backup_name }}"
        dest: "{{ local_backup_root }}/"
        flat: yes
      delegate_to: ullrmedia

    - name: Upload to Proton Drive
      shell: >
        rclone copy
          "{{ local_backup_root }}/{{ backup_name }}"
          "{{ proton_remote }}:backups/{{ today }}/ullrmedia/"
      environment:
        RCLONE_CONFIG_FILE: "{{ lookup('env','HOME') }}/.config/rclone/rclone.conf"

    - name: Remove remote tarball
      shell: ssh ullrmedia "rm -f /tmp/{{ backup_name }}"

    - name: Cleanup local staging
      file:
        path: "{{ local_backup_root }}"
        state: absent
        ignore_errors: true
