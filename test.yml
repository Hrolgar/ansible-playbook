- name: Download Servarr Backups and Upload to Proton Drive, plus ullrservices Docker Compose Files
  hosts: localhost
  gather_facts: true
  vars:
    # List of applications for which backup files are fetched.
    services:
      - prowlarr
    remote_path_base: "/opt/nas/apps"
    today: "{{ ansible_date_time.date }}"
    # Local backup folder (inside your Semaphore container)
    local_backup_root: "/tmp/ansible_vm_backups/{{ today }}"
    proton_remote: "proton-remote"
    retention_count: 5

  tasks:
    ###############################################
    # Part 1 – Per-Service Backup Download & Upload
    ###############################################
    - name: Ensure local backup root exists for each service
      file:
        path: "{{ local_backup_root }}/{{ item }}"
        state: directory
        mode: "0755"
      loop: "{{ services }}"

    - name: Find latest backup path on remote host for each service
      shell: "ls -t {{ remote_path_base }}/{{ item }}/Backups/scheduled/*.zip | head -n 1"
      delegate_to: ullrservarr
      register: latest_backups
      retries: 3
      delay: 5
      until: latest_backups.rc == 0
      loop: "{{ services }}"
      loop_control:
        label: "{{ item }}"

    - name: Debug latest backup paths gathered from remote host
      debug:
        msg: "{{ latest_backups.results | map(attribute='stdout') | list }}"

    - name: Set fact mapping each service to its remote backup file path
      set_fact:
        service_backups: "{{ dict(services | zip(latest_backups.results | map(attribute='stdout') | list)) }}"

    - name: Set fact for backup filenames (basename of remote file)
      set_fact:
        service_backup_names: "{{ dict(services | zip(latest_backups.results | map(attribute='stdout') | map('basename') | list)) }}"

    - name: Fetch backup file from remote host for each service
      fetch:
        src: "{{ item.value }}"
        dest: "{{ local_backup_root }}/{{ item.key }}/"
        flat: yes
      delegate_to: ullrservarr
      loop: "{{ service_backups | dict2items }}"
      loop_control:
        label: "{{ item.key }}"
      register: fetch_result
      retries: 3
      delay: 5
      until: fetch_result is success

    - name: Upload backup file to Proton Drive for each service (no extra folder)
      shell: >
        rclone copy
        "{{ local_backup_root }}/{{ item }}/{{ service_backup_names[item] }}"
        "{{ proton_remote }}:backups/{{ today }}/ullrservices/{{ item }}/{{ service_backup_names[item] }}"
      loop: "{{ services }}"
      loop_control:
        label: "{{ item }}"
      environment:
        RCLONE_CONFIG_FILE: "/home/hrolgar/.config/rclone/rclone.conf"

    - name: Cleanup old backups in Proton Drive for Servarr backups
      shell: |
        rclone lsjson "{{ proton_remote }}:backups/{{ today }}/" --recursive |
        jq -r '.[] | select(.Path | test(".*\\.zip$")) | .Path' |
        sort -r | tail -n +{{ retention_count + 1 }} |
        xargs -r -I {} rclone delete "{{ proton_remote }}:backups/{}"
      environment:
        RCLONE_CONFIG_FILE: "/home/hrolgar/.config/rclone/rclone.conf"

    ###################################################
    # Part 2 – One-Time Fetch & Upload of Compose Files
    ###################################################
    - name: Ensure local backup folder for ullrservices exists
      file:
        path: "{{ local_backup_root }}/ullrservices"
        state: directory
        mode: "0755"

    - name: Fetch Docker Compose file (from folder 41) for arr-compose.yml
      fetch:
        src: "/opt/nas/apps/portainer/compose/41/docker-compose.yml"
        dest: "{{ local_backup_root }}/ullrservices/arr-compose.yml"
        flat: yes
      delegate_to: ullrservarr
      register: fetch_arr_compose
      retries: 3
      delay: 5
      until: fetch_arr_compose is success

    - name: Fetch Docker Compose file (from folder 40) for arr-extra-compose.yml
      fetch:
        src: "/opt/nas/apps/portainer/compose/40/docker-compose.yml"
        dest: "{{ local_backup_root }}/ullrservices/arr-extra-compose.yml"
        flat: yes
      delegate_to: ullrservarr
      register: fetch_arr_extra
      retries: 3
      delay: 5
      until: fetch_arr_extra is success

    - name: Upload arr-compose.yml (from folder 41) to Proton Drive
      shell: >
        rclone copy
        "{{ local_backup_root }}/ullrservices/arr-compose.yml"
        "{{ proton_remote }}:backups/{{ today }}/ullrservices/arr-compose.yml"
      environment:
        RCLONE_CONFIG_FILE: "/home/hrolgar/.config/rclone/rclone.conf"

    - name: Upload arr-extra-compose.yml (from folder 40) to Proton Drive
      shell: >
        rclone copy
        "{{ local_backup_root }}/ullrservices/arr-extra-compose.yml"
        "{{ proton_remote }}:backups/{{ today }}/ullrservices/arr-extra-compose.yml"
      environment:
        RCLONE_CONFIG_FILE: "/home/hrolgar/.config/rclone/rclone.conf"

    #########################
    # Final Cleanup
    #########################
    - name: Remove local backups
      file:
        path: "{{ local_backup_root }}"
        state: absent
      ignore_errors: true
